package com.example.controller;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.example.domain.Criteria;
import com.example.domain.PageMaker;
import com.example.domain.ProductVO;
import com.example.mapper.ProductMapper;
import com.example.service.ProductService;

@Controller
public class ProductController {
	@Autowired
	ProductService service;

	@Autowired
	ProductMapper mapper;

	String randomId;
	File target;

	@Resource(name = "uploadPath")
	String path;

	@RequestMapping(value = "/insert", method = RequestMethod.GET)
	public void insert() {

	}

	@RequestMapping(value = "/insert", method = RequestMethod.POST)
	public String insert(ProductVO vo, MultipartHttpServletRequest upload) throws Exception {
		MultipartFile file = upload.getFile("file");

		if (!file.isEmpty()) {
			randomId = UUID.randomUUID().toString() + "_" + file.getOriginalFilename();
			target = new File(path, randomId);
			FileCopyUtils.copy(file.getBytes(), target);
			vo.setImage(randomId);
		}

		List<MultipartFile> files = upload.getFiles("files");
		if (files.size() > 0) {
			File makePath = new File(path + "/attach");
			if (!makePath.exists()) {
				makePath.mkdir();
			}
		}
		ArrayList<String> images = new ArrayList<>();
		for (MultipartFile f : files) {
			if (!f.isEmpty()) {
				randomId = UUID.randomUUID().toString() + "_" + f.getOriginalFilename();
				target = new File(path + "/attach", randomId);
				FileCopyUtils.copy(f.getBytes(), target);
				images.add(randomId);
			}
		}
		vo.setImages(images);
		service.insert(vo);
		return "redirect:list";
	}

	@RequestMapping("/display")
	@ResponseBody
	public ResponseEntity<byte[]> display(String fileName) throws Exception {
		ResponseEntity<byte[]> result = null;
		// display fileName이 있는 경우
		if (!fileName.equals("")) {
			File file = new File(path + File.separator + fileName);
			HttpHeaders header = new HttpHeaders();
			header.add("Content-Type", Files.probeContentType(file.toPath()));
			result = new ResponseEntity<>(FileCopyUtils.copyToByteArray(file), header, HttpStatus.OK);
		}
		return result;
	}

	@RequestMapping(value = "/list")
	public void list(Criteria cri, Model model) {
		if (cri.getPerPageNum() == 10) {
			cri.setPerPageNum(4);
		}
		PageMaker maker = new PageMaker();
		maker.setCri(cri);
		maker.setTotalCount(mapper.totalCount(cri));
		model.addAttribute("maker", maker);
		model.addAttribute("list", mapper.list(cri));
	}

	@RequestMapping(value = "/read")
	public void read(int pCode, Model model) {
		model.addAttribute("vo", mapper.read(pCode));
		model.addAttribute("images", mapper.getImage(pCode));
	}

	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public String update(ProductVO vo, MultipartHttpServletRequest upload) throws IOException {
		MultipartFile file = upload.getFile("file");
		if (!file.isEmpty()) {
			randomId = UUID.randomUUID().toString() + "_" + file.getOriginalFilename();
			target = new File(path, randomId);
			FileCopyUtils.copy(file.getBytes(), target);
			vo.setImage(randomId);
		}

		List<MultipartFile> files = upload.getFiles("files");
		ArrayList<String> images = new ArrayList<>();
		if (!files.get(0).getOriginalFilename().equals("")) {
			for (MultipartFile f : files) {
				randomId = UUID.randomUUID().toString() + "_" + f.getOriginalFilename();
				target = new File(path + "/attach", randomId);
				FileCopyUtils.copy(f.getBytes(), target);
				images.add(randomId);
			}
		}
		vo.setImages(images);
		vo.setImages(images);
		service.update(vo);
		return "redirect:list";
	}

	@RequestMapping(value = "delete")
	public void delete(int pCode) {
		service.delete(pCode);
	}
}
